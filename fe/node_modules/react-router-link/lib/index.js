'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _React$PropTypes = _react2['default'].PropTypes;
var bool = _React$PropTypes.bool;
var object = _React$PropTypes.object;
var string = _React$PropTypes.string;
var func = _React$PropTypes.func;
var oneOfType = _React$PropTypes.oneOfType;
var arrayOf = _React$PropTypes.arrayOf;

function isLeftClickEvent(event) {
    return event.button === 0;
}

function isModifiedEvent(event) {
    return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
}

function isEmptyObject(object) {
    for (var p in object) {
        if (object.hasOwnProperty(p)) return false;
    }return true;
}

/**
 * A <Link> is used to create an <a> element that links to a route.
 * When that route is active, the link gets an "active" class name
 * (or the value of its `activeClassName` prop).
 *
 * For example, assuming you have the following route:
 *
 *   <Route path="/posts/:postID" component={Post} />
 *
 * You could use the following component to link to that route:
 *
 *   <Link to={`/posts/${post.id}`} />
 *
 * Links may pass along location state and/or query string parameters
 * in the state/query props, respectively.
 *
 *   <Link ... query={{ show: true }} state={{ the: 'state' }} />
 *
 * This updated version of the link component adds two extra parameters:
 *
 * eventName
 * =========
 * This is the event that the component listens to.  It defaults to `onClick`,
 * but can be set to another event such as `onTouchTap` if you are using the
 * `react-tap-event-plugin` module to get around the iOS 300ms delay.
 * You can also pass an array of strings to listen to multiple events.
 *
 * historyType
 * ===========
 * This can be set to either `push`, `replace` or `back`.
 *
 * `push`: this adds the location to the history using `pushState`
 * `replace`: this replaces the top of the history using `replaceState`
 * `back`: this goes back to the previous history location in the stack.  If you use
 * this option you shouldn't specify a `to` parameter.
 */

var Link = (function (_React$Component) {
    _inherits(Link, _React$Component);

    function Link() {
        _classCallCheck(this, Link);

        _get(Object.getPrototypeOf(Link.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(Link, [{
        key: 'handleClick',
        value: function handleClick(event) {
            var allowTransition = true,
                clickResult = undefined;

            if (this.props.onClick) clickResult = this.props.onClick(event);

            if (isModifiedEvent(event)) return;

            if (clickResult === false || event.defaultPrevented === true) allowTransition = false;

            event.preventDefault();

            if (allowTransition) {
                if (this.props.historyType === 'push') {
                    this.context.history.pushState(this.props.state, this.props.to, this.props.query);
                } else if (this.props.historyType === 'replace') {
                    this.context.history.replaceState(this.props.state, this.props.to, this.props.query);
                } else if (this.props.historyType === 'back') {
                    this.context.history.goBack();
                } else {
                    console.error('Only \'push\', \'replace\' and \'back\' are supported as historyTypes');
                }
            }
        }
    }, {
        key: 'render',
        value: function render() {
            var _this = this;

            var history = this.context.history;
            var _props = this.props;
            var activeClassName = _props.activeClassName;
            var activeStyle = _props.activeStyle;
            var onlyActiveOnIndex = _props.onlyActiveOnIndex;
            var to = _props.to;
            var query = _props.query;
            var state = _props.state;
            var onClick = _props.onClick;
            var eventName = _props.eventName;

            var props = _objectWithoutProperties(_props, ['activeClassName', 'activeStyle', 'onlyActiveOnIndex', 'to', 'query', 'state', 'onClick', 'eventName']);

            if (Object.prototype.toString.call(eventName) === '[object Array]') {
                eventName.forEach(function (eventName) {
                    props[eventName] = _this.handleClick.bind(_this);
                });
            } else {
                props[eventName] = this.handleClick.bind(this);
            }

            // Ignore if rendered outside the context
            // of history, simplifies unit testing.
            if (history) {
                if (activeClassName || activeStyle != null && !isEmptyObject(activeStyle)) {
                    if (history.isActive(to, query, onlyActiveOnIndex)) {
                        if (activeClassName) props.className += props.className === '' ? activeClassName : ' ' + activeClassName;

                        if (activeStyle) props.style = _extends({}, props.style, activeStyle);
                    }
                }
            }

            return _react2['default'].createElement('a', props);
        }
    }], [{
        key: 'contextTypes',
        value: {
            history: object
        },
        enumerable: true
    }, {
        key: 'propTypes',
        value: {
            activeStyle: object,
            activeClassName: string,
            onlyActiveOnIndex: bool.isRequired,
            to: string,
            query: object,
            state: object,
            onClick: func,
            eventName: oneOfType([string, arrayOf(string)]),
            historyType: string.isRequired
        },
        enumerable: true
    }, {
        key: 'defaultProps',
        value: {
            onlyActiveOnIndex: false,
            className: '',
            style: {},
            eventName: 'onClick',
            historyType: 'push'
        },
        enumerable: true
    }]);

    return Link;
})(_react2['default'].Component);

exports.Link = Link;